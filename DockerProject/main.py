#!/usr/bin/env python3
import os
import sys
import subprocess
import json
import shutil
from pathlib import Path

# C·∫•u h√¨nh paths
BASE_DIR = "/app"
INPUT_DIR = "/app"
OUTPUT_DIR = "/app/output"
TEMP_DIR = "/app/temp"

# Files
SUBJECTS_FILE = os.path.join(INPUT_DIR, "subjects.txt")
CONTENT_FILE = os.path.join(TEMP_DIR, "content.txt")
PLAN_FILE = os.path.join(TEMP_DIR, "plan.txt")

def setup_directories():
    """T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt"""
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    os.makedirs(TEMP_DIR, exist_ok=True)
    os.makedirs(os.path.join(OUTPUT_DIR, "my_result"), exist_ok=True)
    print("‚úÖ ƒê√£ t·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt")

def check_input():
    """Ki·ªÉm tra file input"""
    if not os.path.exists(SUBJECTS_FILE):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file subjects.txt t·∫°i {SUBJECTS_FILE}")
        return False
    
    with open(SUBJECTS_FILE, 'r', encoding='utf-8') as f:
        subjects = [line.strip() for line in f if line.strip()]
    
    if not subjects:
        print("‚ùå File subjects.txt tr·ªëng")
        return False
    
    print(f"‚úÖ T√¨m th·∫•y {len(subjects)} ch·ªß ƒë·ªÅ trong subjects.txt")
    return True

def run_pipeline():
    """Ch·∫°y to√†n b·ªô pipeline"""
    print("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y pipeline...")
    
    try:
        # B∆∞·ªõc 1: T·∫°o n·ªôi dung
        print("\nüìù B∆∞·ªõc 1: T·∫°o n·ªôi dung...")
        result = subprocess.run([sys.executable, "generate_content.py"], 
                              check=True, capture_output=True, text=True)
        print("‚úÖ Ho√†n th√†nh t·∫°o n·ªôi dung")
        
        # B∆∞·ªõc 2: T·∫°o plan
        print("\nüìã B∆∞·ªõc 2: T·∫°o plan...")
        result = subprocess.run([sys.executable, "create_plan.py"], 
                              check=True, capture_output=True, text=True)
        print("‚úÖ Ho√†n th√†nh t·∫°o plan")
        
        # B∆∞·ªõc 3: X·ª≠ l√Ω videos
        print("\nüé• B∆∞·ªõc 3: X·ª≠ l√Ω videos...")
        result = subprocess.run([sys.executable, "process_videos.py"], 
                              check=True, capture_output=True, text=True)
        print("‚úÖ Ho√†n th√†nh x·ª≠ l√Ω videos")
        
        # Copy plan.txt v√†o output
        if os.path.exists(PLAN_FILE):
            shutil.copy(PLAN_FILE, os.path.join(OUTPUT_DIR, "plan.txt"))
            print("‚úÖ ƒê√£ copy plan.txt v√†o output")
        
        # Copy content.txt v√†o output ƒë·ªÉ review
        if os.path.exists(CONTENT_FILE):
            shutil.copy(CONTENT_FILE, os.path.join(OUTPUT_DIR, "content.txt"))
            print("‚úÖ ƒê√£ copy content.txt v√†o output")
        
        # Copy to√†n b·ªô plan folder (ch·ª©a script files) v√†o output
        plan_dir = os.path.join(TEMP_DIR, "plan")
        if os.path.exists(plan_dir):
            output_plan_dir = os.path.join(OUTPUT_DIR, "scripts")
            if os.path.exists(output_plan_dir):
                shutil.rmtree(output_plan_dir)
            shutil.copytree(plan_dir, output_plan_dir)
            print("‚úÖ ƒê√£ copy scripts v√†o output/scripts/")
        
        print("\nüéâ Pipeline ho√†n th√†nh th√†nh c√¥ng!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi ch·∫°y pipeline: {e}")
        if e.stdout:
            print(f"STDOUT: {e.stdout}")
        if e.stderr:
            print(f"STDERR: {e.stderr}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        return False

def main():
    """H√†m main"""
    print("üê≥ Docker Video Generation Pipeline")
    print("=" * 50)
    
    # Setup
    setup_directories()
    
    # Ki·ªÉm tra input
    if not check_input():
        sys.exit(1)
    
    # Ch·∫°y pipeline
    if run_pipeline():
        print("\n‚úÖ T·∫•t c·∫£ ho√†n th√†nh!")
        print(f"üìÅ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u t·∫°i: {OUTPUT_DIR}")
        print("   - plan.txt: Danh s√°ch c√°c video")
        print("   - content.txt: N·ªôi dung g·ªëc ƒë∆∞·ª£c generate")
        print("   - scripts/: Th∆∞ m·ª•c ch·ª©a script t·ª´ng video")
        print("   - my_result/: Th∆∞ m·ª•c ch·ª©a video")
    else:
        print("\n‚ùå Pipeline th·∫•t b·∫°i!")
        sys.exit(1)

if __name__ == "__main__":
    main() 