---
description: # Technical Details & Troubleshooting Guide
globs: 
alwaysApply: false
---
# Technical Details & Troubleshooting Guide

## Container Architecture

### Docker Environment:
- **Base Image**: `python:3.10-slim` 
- **System Dependencies**: ffmpeg, wget, curl, git
- **Python Dependencies**: Xem [DockerProject/requirements.txt](mdc:DockerProject/requirements.txt)
- **Working Directory**: `/app/`
- **Volume Mounts**: 
  - `./output:/app/output` (bidirectional)
  - `./subjects.txt:/app/subjects.txt` (read-only)

### Environment Variables:
- **OPENAI_API_KEY**: Required cho content generation và keyword extraction
- **PYTHONUNBUFFERED=1**: Để real-time logging
- **DEBIAN_FRONTEND=noninteractive**: Tránh hang during apt install

## Pipeline Data Flow

### File System Layout trong Container:
```
/app/
├── subjects.txt          # Input (mounted)
├── temp/                 # Temporary processing files
│   ├── content.txt       # Generated content từ OpenAI
│   ├── plan.txt          # Video plan mapping
│   ├── plan/             # Individual script files
│   ├── current_script.txt # Script đang được process
│   ├── keywords.txt      # Generated keywords
│   ├── my_audio/         # Generated audio files
│   ├── my_images/        # Downloaded/placeholder images
│   └── final_video.mp4   # Temp video output
└── output/               # Final output (mounted)
    ├── plan.txt          # Final plan file
    └── my_result/        # Final video files
```

### Processing States:
1. **Content Generation**: `subjects.txt` → `temp/content.txt`
2. **Plan Creation**: `temp/content.txt` → `temp/plan.txt` + `temp/plan/*.txt`
3. **Per-Video Processing**:
   - Load script → `temp/current_script.txt`
   - Generate audio → `temp/my_audio/output_*.wav`
   - Generate keywords → `temp/keywords.txt`
   - Download images → `temp/my_images/output_*.jpg`
   - Combine → `temp/final_video.mp4`
   - Move → `output/my_result/[sanitized_title].mp4`

## Key Technical Decisions

### Text-to-Speech (TTS):
- **Primary**: Google TTS (gTTS) - free, decent quality, multi-language
- **Fallback**: Demo audio generation - synthetic tones nếu gTTS fail
- **Chunking**: Split long text thành chunks ≤200 chars để tránh TTS limits
- **Audio Format**: WAV 24kHz (compatible với FFmpeg)

### Image Processing:
- **Source**: Google Images via icrawler
- **Fallback**: Placeholder images với colored backgrounds + text overlay
- **Processing**: Resize + crop về 1280x720 (16:9 aspect ratio)
- **Format**: JPEG quality 90% để balance size vs quality

### Video Generation:
- **Method**: FFmpeg static image + audio combination
- **Settings**: 
  - Video: libx264, CRF 23, 30fps, yuv420p
  - Audio: AAC, 192kbps
- **Concatenation**: Individual clips → final video via FFmpeg concat

## Common Issues & Solutions

### 1. OpenAI API Errors
**Symptoms**: Content generation fails
**Causes**: 
- Invalid API key
- Rate limiting
- Model không available (gpt-4.1-nano → gpt-4.1-mini fallback)

**Solutions**:
```bash
# Check API key
echo $OPENAI_API_KEY

# Test API connectivity  
curl -H "Authorization: Bearer $OPENAI_API_KEY" \
  https://api.openai.com/v1/models
```

### 2. Image Download Failures
**Symptoms**: Chỉ có placeholder images
**Causes**:
- Google Images blocking/rate limiting
- Network connectivity issues
- Invalid search keywords

**Debug**: Check logs cho "❌ Error downloading image"
**Solution**: Placeholder system tự động kick in

### 3. FFmpeg Processing Errors
**Symptoms**: Video generation fails, no output files
**Common Causes**:
- Missing audio/image files
- Corrupted media files
- Insufficient disk space

**Debug Commands**:
```bash
# Check FFmpeg installation
ffmpeg -version

# Test basic functionality
ffprobe input_file.wav
```

### 4. Memory/Performance Issues
**Symptoms**: Container OOM, slow processing
**Solutions**:
- Increase Docker memory limit
- Monitor với `docker stats`
- Implement batch processing limits

### 5. Volume Mount Issues
**Symptoms**: No output files, permission errors
**Debug**:
```bash
# Check mount points
docker run --rm -v "$(pwd)/output:/app/output" \
  video-generation-pipeline ls -la /app/output

# Check permissions
ls -la output/
```

## Debugging Strategies

### 1. Container Inspection:
```bash
# Run interactive shell
docker run -it --rm \
  -v "$(pwd)/output:/app/output" \
  -v "$(pwd)/subjects.txt:/app/subjects.txt" \
  -e OPENAI_API_KEY="$OPENAI_API_KEY" \
  video-generation-pipeline /bin/bash

# Check running processes
docker exec -it [container_id] ps aux
```

### 2. Log Analysis:
- Look for emoji indicators: ✅ success, ❌ error, ⚠️ warning
- Check step-by-step progress: 📝, 📋, 🎥, 🔹
- Monitor resource usage: 📊, 📏, 📄

### 3. Incremental Testing:
```bash
# Test individual components
python generate_content.py
python create_plan.py  
python audio_generator.py
```

## Performance Optimization

### 1. Container Resources:
```bash
# Run với memory limit
docker run --memory=4g --rm \
  -v "$(pwd)/output:/app/output" \...

# Monitor resource usage
docker stats
```

### 2. Parallel Processing:
- Hiện tại: Sequential video processing
- Future: Implement concurrent video generation
- Bottleneck: OpenAI API rate limits

### 3. Caching Strategies:
- Cache generated content based on subject hash
- Cache downloaded images
- Reuse audio files cho identical text

## Integration Notes

### Với OldProject Upload System:
- **plan.txt format**: `title | script_filename`
- **Video naming**: Sanitized titles → valid filenames
- **File structure**: Compatible với [OldProject/upload/uploadTuDongYoutube.py](mdc:OldProject/upload/uploadTuDongYoutube.py)

### API Rate Limits:
- **OpenAI**: Depends on plan (gpt-4o-mini has higher limits)
- **Google Images**: Implicit rate limiting, handled by icrawler
- **gTTS**: Free tier có daily limits

### Scaling Considerations:
- **Horizontal**: Multiple containers cho different subject sets  
- **Vertical**: Increase container resources
- **Storage**: Implement cleanup strategies cho temp files
- **Monitoring**: Add health checks và metrics collection

